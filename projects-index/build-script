#!/bin/bash
# Build Script, version 2
#
#  Populates the ./src/projects/ directory with subdirectories
#+ containing distribution files for each project in ../ that has
#+ both a src/ and a dist/ subdirectory at depth 1. Also creates the
#+ file ./src/scripts/projects.js, which declares a global projects
#+ variable in JavaScript. The projects variable is an array of
#+ objects containing name and live properties, where name is the
#+ name for a folder located in ../ excluding the projects-index
#+ folder, and live is a boolean indicating the presence of
#+ distribution files in the ./src/projects directory corresponding
#+ to the named project.

# Remove the ./src/projects directory if it exists.
if [ -d "./src/projects" ]
then
  rm -r ./src/projects
fi

#  Get all directories in ../, excluding hidden (dot) directories and
#+ the projects-index directory, then trim the preceding ../ to get
#+ just the directory names.
names=$(find ../ -maxdepth 1 -mindepth 1 -type d | grep -v "projects-index" | grep -v "\/\." | grep -o "[^\.\./].*")

# Let the user know the directory names found.
echo
echo "Projects found:"
echo "$names"
echo

# For each directory name...
for name in $names
do
  # Check for src/ and dist/ subdirectories at depth 1.
  if [ -d "../$name/src" ] && [ -d "../$name/dist" ]
  then
    # Let the user know the distribution files are being added.
    echo "Adding: ./src/projects/$name/dist"
    # Make the destination directory.
    mkdir -p ./src/projects/$name/dist
    # Copy the contents of dist/ to ./src/projects/$name/dist/.
    cp -r ../$name/dist/* ./src/projects/$name/dist/
  # Check for only src/ subdirectories at depth 1.
  elif [ -d "../$name/src" ]
  then
    #  Warn the user that the project's distribution files may need
    #+ to be built.
    >&2 echo "Warning: ../$name/dist is missing. Did you forget to build the project?"
  fi
done

#  Create the beginning of the string to write to the projects.js
#+ file.
js="var projects = ["

# For each directory name...
for name in $names
do
  #  Create the beginning of a new JavaScript object in the js string
  #+ and add the name property and value, and the live property.
  js="$js{name: '$name', live:"

  #  Check for the presence of distribution files for the named
  #+ project in ./src/projects/.
  if [ -d "./src/projects/$name/dist" ]
  then
    # Set the live property to true and close the JavaScript object.
    js="$js true}, "
  # If there are no distribution files for the named project...
  else
    # Set the live property to false and close the JavaScript object.
    js="$js false}, "
  fi
done

#  Trim the last ", " from the js string.
js=${js%", "}

# End the JavaScript array declaration.
js="$js];"

# Make sure the ./src/scripts directory exists.
if ! [ -d "./src/scripts" ]
then
  mkdir ./src/scripts
fi

#  Create or recreate the projects.js file beginning with a
#+ JavaScript comment that the file was automatically generated.
echo "// Generated automatically by \`build-script\`." > ./src/scripts/projects.js

# Append the js string to the projects.js file.
echo $js >> ./src/scripts/projects.js

# Inform the user that the projects.js file was created.
echo "Created: ./src/scripts/projects.js"
echo

exit
